// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  password             String?
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  idNumber             String?
  phoneNumber          String?
  dateOfBirth          DateTime?
  isAdmin              Boolean                @default(false)
  Comment              Comment[]
  News                 News[]
  Review               Review[]
  Booking              Booking[]
  BookingAccommodation BookingAccommodation[]
}

model News {
  id          String    @id @default(cuid())
  type        String    @default("news") // news, event, festival
  title       String
  content     String
  image       String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Comment     Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  newsId    String
  User      User      @relation(fields: [userId], references: [id])
  News      News      @relation(fields: [newsId], references: [id])
  commentId String?
  Comment   Comment[] @relation("CommentToComment")
  parent    Comment?  @relation("CommentToComment", fields: [commentId], references: [id])
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  image       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tour {
  id                 String        @id @default(cuid())
  title              String
  slug               String        @unique
  description        String
  duration           Int // in minutes or hours
  location           Location      @relation(fields: [locationId], references: [id])
  locationId         String
  price              Float
  currency           String // e.g., USD, IDR
  language           String // e.g., "English"
  minGuests          Int
  maxGuests          Int
  cancellationPolicy String
  images             Image[]
  activities         Activity[]
  inclusions         Inclusion[]
  exclusions         Exclusion[]
  safetyInfo         SafetyInfo[]
  reviews            Review[]
  category           TourCategory? @relation(fields: [categoryId], references: [id])
  categoryId         String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  Booking            Booking[]
}

model Location {
  id            String          @id @default(cuid())
  name          String
  latitude      Float?
  longitude     Float?
  tours         Tour[]
  accommodation Accommodation[]
}

model Image {
  id              String         @id @default(cuid())
  url             String
  altText         String?
  tour            Tour?          @relation(fields: [tourId], references: [id])
  tourId          String?
  accommodation   Accommodation? @relation(fields: [accommodationId], references: [id])
  accommodationId String?
}

model Activity {
  id          String @id @default(cuid())
  title       String
  description String
  tour        Tour   @relation(fields: [tourId], references: [id])
  tourId      String
}

model Inclusion {
  id          String @id @default(cuid())
  description String
  tour        Tour   @relation(fields: [tourId], references: [id])
  tourId      String
}

model Exclusion {
  id          String @id @default(cuid())
  description String
  tour        Tour   @relation(fields: [tourId], references: [id])
  tourId      String
}

model SafetyInfo {
  id          String @id @default(cuid())
  description String
  tour        Tour   @relation(fields: [tourId], references: [id])
  tourId      String
}

model TourCategory {
  id    String @id @default(cuid())
  name  String
  tours Tour[]
}

model Review {
  id              String         @id @default(cuid())
  rating          Int
  comment         String
  createdAt       DateTime       @default(now())
  accommodation   Accommodation? @relation(fields: [accommodationId], references: [id])
  accommodationId String?
  user            User?          @relation(fields: [userId], references: [id])
  userId          String?
  tour            Tour?          @relation(fields: [tourId], references: [id])
  tourId          String?

  @@index([accommodationId])
}

model Accommodation {
  id                   String                 @id @default(cuid())
  name                 String
  description          String
  location             Location               @relation(fields: [locationId], references: [id])
  locationId           String
  price                Float
  currency             String // e.g., USD, IDR
  images               Image[]
  reviews              Review[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  BookingAccommodation BookingAccommodation[]

  @@index([locationId])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum TimeSlot {
  MORNING
  AFTERNOON
  EVENING
}

model Booking {
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  tour      Tour          @relation(fields: [tourId], references: [id])
  tourId    String
  date      DateTime
  timeSlot  TimeSlot
  guests    Int
  price     Float
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

model BookingAccommodation {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId String
  checkInDate     DateTime
  checkOutDate    DateTime
  numberOfGuests  Int
  specialRequests String?
  price           Float
  status          BookingStatus @default(PENDING)
}
